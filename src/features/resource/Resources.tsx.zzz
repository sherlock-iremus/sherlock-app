# URL EXTERNE

{makeNegativeButton(
    <PiGlobeFill className='text-lg' />,
    resourceUri,
    "Consulter la ressource à l'extérieur de SHERLOCK"
)}

# E32

{data_id.authdocBindings.length > 0 && (
  <>
    <div className='flex px-6'>
      <span className='mt-1 icon'>
        <PiTreeViewDuotone />
      </span>
      <span>
        &nbsp;Cette ressource est un concept défini dans le document de
        référence intitulé :&nbsp;
      </span>
      <span className='font-serif'>
        «
        <Link
          href={'/?resource=' + data_id.authdocBindings[0].authdoc.value}
          target='_blank'
        >
          {data_id.authdocBindings[0].authdoc_label.value}
        </Link>
        »
      </span>
      .
    </div>
    <br />
  </>
)}

# INCOMING C

// Incoming predicates
const countIncomingPredicatesSparqlQuery = countIncomingPredicates(resourceUri)
// const { data: countIncomingPredicatesData } = sparqlApi.endpoints.getSparqlQueryResult.useQuery(n_in_q)
// const bigIncomingPredicatesBindings: SparqlQueryResultObject_Binding[] = []
// const otherIncomingPredicates: string[] = []
// if (countIncomingPredicatesData) {
//     countIncomingPredicatesData.results.bindings.map(binding => {
//         const n = parseInt(binding.c.value)
//         if (n < 20) {
//             otherIncomingPredicates.push(binding.lp.value)
//         }
//         else {
//             bigIncomingPredicatesBindings.push(binding)
//         }
//     })
// }

// const otherIncomingPredicatesSparqlQuery = identity(resourceUri, true, otherIncomingPredicates, LinkedResourcesDirectionEnum.INCOMING)
// let { data: otherIncomingPredicatesData } = sparqlApi.endpoints.getSparqlQueryResult.useQuery(otherIncomingPredicatesSparqlQuery)

# INCOMING V

{
    otherIncomingPredicatesData && <>
        <PredicateSectionTitle
            direction={LinkedResourcesDirectionEnum.INCOMING}
            icon={undefined}
            title="triplets entrants"
            prefixedUri={undefined}
            sparqlQuery={otherIncomingPredicatesSparqlQuery}
            n={0}
        />
        <div className='px-6 py-6'>
            <POTable bindings={otherIncomingPredicatesData?.results.bindings} linkedResources={true} />
        </div>
    </>
}

{
    bigIncomingPredicatesBindings.map(binding => {
        let k = 0
        const n = parseInt(binding.c.value)
        return <div key={k++} className='py-6'>
            <PredicateWithManyLinkedResources resourceUri={resourceUri} predicateUri={binding.lp.value} n={n} direction={LinkedResourcesDirectionEnum.INCOMING} />
        </div>
    })
}